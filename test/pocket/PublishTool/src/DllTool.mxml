<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx" keyDown="windowedapplication1_keyDownHandler(event)"
					   width="1000" height="630" minWidth="600" 
					   creationComplete="windowedapplication1_creationCompleteHandler(event)"
					   nativeDragDrop="windowedapplication1_nativeDragDropHandler(event)"
					   nativeDragEnter="windowedapplication1_nativeDragEnterHandler(event)"
					   showStatusBar="true">
	<fx:Style source="style.css"/>
	<fx:Script> 
		<![CDATA[
			import air.update.ApplicationUpdaterUI;
			
			import mx.controls.Alert;
			import mx.controls.Tree;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.LayoutManager;
			import mx.managers.PopUpManager;
			
			import org.flexlite.action.ConfigManager;
			import org.flexlite.domUtils.DomLoader;
			import org.flexlite.domUtils.FileUtil;
			import org.flexlite.domUtils.SharedObjectUtil;
			import org.flexlite.domUtils.StringUtil;
			import org.flexlite.events.DelEvent;
			import org.flexlite.events.PublishEvent;
			import org.flexlite.events.SearchEvent;
			import org.flexlite.update.AirUpdate;
			import org.flexlite.view.DFPublishTool;
			import org.flexlite.view.PackPanel;
			import org.flexlite.view.SearchPanel;
			
			import spark.components.gridClasses.GridLayer;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSelectionEvent;
			[Bindable]
			/**
			 * 拖拽文件进入
			 */
			private var manager:ConfigManager = new ConfigManager();
			
			/**
			 * SharedObject存储路径
			 */		
			public const FL_DIR:String = "FLEXLITE";
			
			/**
			 * 拖拽文件进入
			 */
			private function windowedapplication1_nativeDragEnterHandler(event:NativeDragEvent):void
			{
				if(event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
				{       
					if(event.clipboard.hasFormat(ClipboardFormats.FILE_LIST_FORMAT))
						DragManager.acceptDragDrop(this); 
				}
			}
			/**
			 * 拖拽文件放下
			 */
			private function windowedapplication1_nativeDragDropHandler(event:NativeDragEvent):void
			{
				var arr:Array = event.clipboard.getData(ClipboardFormats.FILE_LIST_FORMAT) as Array;
				var list:Array = [];
				for each(var file:File in arr)
				{
					if(file.isDirectory)
					{
						list = list.concat(FileUtil.search(file.nativePath,null,searchfilter));
					}
					else if(searchfilter(file))
					{
						list.push(file);
					}
				}
				manager.addFiles(list);
			}
			/**
			 * "添加资源"按钮点击
			 */
			protected function addDirBtn_clickHandler(event:Event):void
			{
				FileUtil.browseForOpen(addDir,3,null,"添加文件夹",srcPath.text);
			}
			
			/**
			 * 分析指定目录下的所有文件
			 */
			private function addDir(dir:File):void
			{
				if(srcPath.text=="")
				{
					changeResourcePath(dir.nativePath);
				}
				var list:Array = FileUtil.search(dir.nativePath,null,searchfilter);
				if(list.length==0)
					return;
				manager.addFiles(list);
			}
			/**
			 * 保存资源相对路径的设置
			 */
			private function changeResourcePath(path:String):void
			{
				srcPath.text = path;
				manager.resourcePath = path;
				var index:int = srcPath.text.length-1;
				srcPath.textDisplay.scrollToRange(index,index);
				SharedObjectUtil.write(FL_DIR,"resourcePath",path);
				if(path)
					SharedObjectUtil.write(FL_DIR,manager.currentConfigPath,path);
			}
			
			/**
			 * 文件过滤回调函数
			 */
			private function searchfilter(file:File):Boolean
			{
				if(file.isDirectory)
				{
					if(file.name.charAt(0)==".")
						return false;
				}
				else
				{
					for each(var ext:String in manager.filterExtensions)
					{
						if(file.extension==ext)
							return false;
					}
				}
				return true;
			}
			
			/**
			 * 加载组切换
			 */
			protected function groupTab_changeHandler():void
			{
				SharedObjectUtil.write(FL_DIR,"selectedIndex",groupTab.selectedIndex);
				manager.currentGroupName = groupTab.selectedItem as String;
			}
			
			private var currentVersion:String = "";
			/**
			 * 初始化完成
			 */
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				manager.app = this;
				createMenus();
				var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
				currentVersion = appUpdater.currentVersion;
				nativeWindow.title = "DllTool "+currentVersion;
				new AirUpdate().checkUpdate();
				var configFile:File = File.applicationDirectory.resolvePath("config/config.xml");
				DomLoader.loadXML(configFile.url,manager.parseConfig);
				dataGrid.addEventListener(DelEvent.DELETE,onDeleteItem);
				groupTab.addEventListener(DelEvent.DELETE,onDeleteItem);

				manager.refreshGroupList();
				
				var selectIndex:int = SharedObjectUtil.read(FL_DIR,"selectedIndex");
				groupTab.selectedIndex = selectIndex;
				manager.currentGroupName = groupTab.selectedItem as String;
				manager.currentConfigPath = SharedObjectUtil.read(FL_DIR,"lastConfig");
				var path:String = SharedObjectUtil.read(FL_DIR,"resourcePath");
				if(path)
				{
					changeResourcePath(StringUtil.trim(path));
				}
				if(manager.currentConfigPath)
				{
					try
					{
						var file:File = new File(manager.currentConfigPath);
					}
					catch(e:Error)
					{
						return;
					}
					setTimeout(openConfig,300,file.nativePath);
				}
			}
			
			/**
			 * 创建菜单
			 */
			private function createMenus():void
			{
				var menu:NativeMenu = new NativeMenu();
				var item:NativeMenuItem;
				item = new NativeMenuItem("文件");
				var fileMenu:NativeMenu = new NativeMenu();
				item.submenu = fileMenu;
				menu.addItem(item);
				fileMenu.addItem(createMenuItem("添加资源文件",addFileBtn_clickHandler,"o"));
				fileMenu.addItem(createMenuItem("添加资源文件夹",addDirBtn_clickHandler,"O"));
				fileMenu.addItem(createMenuItem("清空配置",cleanBtn_clickHandler));
				fileMenu.addItem(new NativeMenuItem("",true));
				fileMenu.addItem(createMenuItem("URL相对路径",browseBtn_clickHandler,"u"));
				fileMenu.addItem(new NativeMenuItem("",true));
				fileMenu.addItem(createMenuItem("导入配置",importBtn_clickHandler,"i"));
				fileMenu.addItem(createMenuItem("导出配置",exportBtn_clickHandler,"s"));
				fileMenu.addItem(new NativeMenuItem("",true));
				item = new NativeMenuItem("最近打开配置");
				fileMenu.addItem(item);
				recentFilesMenu = item.submenu = new NativeMenu();
				updateRecentFilesMenu();
				
				item = new NativeMenuItem("编辑");
				var editMenu:NativeMenu = new NativeMenu();
				item.submenu = editMenu;
				menu.addItem(item);
				editMenu.addItem(createMenuItem("搜索资源",searchRes,"f"));
				editMenu.addItem(createMenuItem("清除搜索",cleanSearchAndExist,"d"));
				editMenu.addItem(new NativeMenuItem("",true));
				editMenu.addItem(createMenuItem("刷新所有资源",refresBtn_clickHandler,"r"));
				editMenu.addItem(createMenuItem("刷新选中项",button2_clickHandler));
				editMenu.addItem(createMenuItem("移除重复的DXR",removeRepeatBtn_clickHandler));
				
				
				item = new NativeMenuItem("项目");
				var projectMenu:NativeMenu = new NativeMenu();
				item.submenu = projectMenu;
				menu.addItem(item);
				projectMenu.addItem(createMenuItem("发布资源",button1_clickHandler,"p"));
				
				nativeWindow.menu = menu;
			}
			
			private var recentFilesMenu:NativeMenu;
			/**
			 * 更新最近打开文件的菜单列表
			 */
			private function updateRecentFilesMenu():void
			{
				if(!recentFilesMenu)
					return;
				var recentFiles:Array = SharedObjectUtil.read(FL_DIR,"recentFiles") as Array;
				if(!recentFiles)
					recentFiles = [];
				recentFilesMenu.removeAllItems();
				for each(var path:String in recentFiles)
				{
					recentFilesMenu.addItem(createMenuItem(path,openRecentFiles));
				}
			}
			/**
			 * 最近打开文件菜单项被点击
			 */
			private function openRecentFiles(event:Event):void
			{
				var menuItem:NativeMenuItem = event.target as NativeMenuItem;
				openConfig(menuItem.label);
			}
			/**
			 * 创建一个菜单项
			 */
			private function createMenuItem(label:String,func:Function,keyCode:String=""):NativeMenuItem
			{
				var menuItem:NativeMenuItem = new NativeMenuItem(label);
				if(keyCode)
				{
					menuItem.keyEquivalent = keyCode;
				}
				menuItem.addEventListener(Event.SELECT,func);
				return menuItem;
			}
			
			/**
			 * 删除一项资源
			 */
			protected function onDeleteItem(event:DelEvent):void
			{
				if(event.currentTarget==groupTab)
				{
					Alert.show("确定要删除组:"+event.data+"？","提示",Alert.YES|Alert.NO,null,function(e:CloseEvent):void{
						if(e.detail==Alert.YES)
						{
							manager.deleteGroup(event.data as String);
						}
					});
				}
				else if(event.currentTarget==dataGrid)
				{
					manager.itemListData.removeItemAt(event.itemIndex);
					manager.checkKeyRepeat();
				}
			}
			
			/**
			 * 导出配置
			 */
			protected function exportBtn_clickHandler(event:Event):void
			{
				if(manager.numGroups==0)
				{
					return;
				}
				if(manager.hasRepeatKey)
				{
					Alert.show("无法导出配置！name和subkeys属性中的字符串必须全局唯一。请检查已经标记为红色的区域，消除所有重复的key后重试。","提示");
					return;
				}
				var type:String = exportFormat.selectedItem;
				var folder:String = FileUtil.getDirectory(manager.currentConfigPath);
				var savedType:String = SharedObjectUtil.read(FL_DIR,manager.currentConfigPath+"type");
				if(!manager.currentConfigPath||savedType!=type)
				{
					FileUtil.browseForSave(function(file:File):void{
						manager.currentConfigPath = file.nativePath;
						nativeWindow.title = "DllTool "+currentVersion+" - "+manager.currentConfigPath;
						SharedObjectUtil.write(FL_DIR,"lastConfig",file.nativePath);
						if(srcPath.text)
							SharedObjectUtil.write(FL_DIR,file.nativePath,srcPath.text);
						SharedObjectUtil.write(FL_DIR,manager.currentConfigPath+"type",type);
						FileUtil.save(file.nativePath,manager.getConfigData(type));
						status = "配置保存成功："+manager.currentConfigPath;
					},folder+"ini."+type.toLowerCase(),"导出配置");
				}
				else
				{
					FileUtil.save(manager.currentConfigPath,manager.getConfigData(type));
					if(srcPath.text)
						SharedObjectUtil.write(FL_DIR,manager.currentConfigPath,srcPath.text);
					status = "配置保存成功："+manager.currentConfigPath;
				}
			}
			
			/**
			 * 资源根路径改变
			 */
			protected function browseBtn_clickHandler(event:Event):void
			{
				FileUtil.browseForOpen(function(file:File):void{
					var newPath:String = file.nativePath+File.separator;
					manager.replaceUrl(newPath,srcPath.text);
					changeResourcePath(newPath);
					refresBtn_clickHandler();
				},3,null,"修改URL相对路径",srcPath.text);
			}
			
			
			protected function dataGrid_gridItemEditorSessionSaveHandler(event:GridItemEditorEvent):void
			{
				manager.checkKeyRepeat();
			}
			
			protected function importBtn_clickHandler(event:Event):void
			{
				FileUtil.browseForOpen(function(file:File):void{
					SharedObjectUtil.write(FL_DIR,"lastConfig",file.nativePath);
					openConfig(file.nativePath);
				},1,null,"打开配置文件",srcPath.text);
			}
			
			private function openConfig(configPath:String):void
			{
				nativeWindow.title = "DllTool "+currentVersion+" - "+configPath;
				var resPath:String = SharedObjectUtil.read(FL_DIR,configPath);
				if(!resPath)
				{
					resPath = SharedObjectUtil.read(FL_DIR,"resourcePath");
					if(!resPath)
						resPath = "";
				}
				changeResourcePath(resPath);
				var type:String;
				var savedType:String = SharedObjectUtil.read(FL_DIR,configPath+"type");
				if(savedType)
				{
					type = savedType;
				}
				else
				{
					var file:File = File.applicationDirectory.resolvePath(configPath);
					switch(file.extension)
					{
						case "json":
							type = "JSON";
							break;
						case "xml":
							type = "XML";
							break;
						default:
							type="AMF";
							break;
					}
				}
				exportFormat.selectedItem = type;
				SharedObjectUtil.write(FL_DIR,configPath+"type",type);

				manager.openConfig(configPath,type);
				
				var recentFiles:Array = SharedObjectUtil.read(FL_DIR,"recentFiles") as Array;
				if(!recentFiles)
					recentFiles = [];
				if(recentFiles.indexOf(configPath)==-1)
				{
					recentFiles.push(configPath);
					SharedObjectUtil.write(FL_DIR,"recentFiles",recentFiles);
					updateRecentFilesMenu();
				}
			}
			
			/**
			 * "清理DXR"按钮触发
			 */
			protected function removeRepeatBtn_clickHandler(event:Event):void
			{
				manager.removeRepeatDxrs();
			}
			
			
			
			/**
			 * 清空当前配置
			 */
			protected function cleanBtn_clickHandler(event:Event):void
			{
				if(manager.numGroups==0)
					return;
				Alert.show("确定要清空当前配置？（不会影响已经导出的文件)","提示",Alert.YES|Alert.NO,null,function(e:CloseEvent):void{
					if(e.detail==Alert.YES)
					{
						manager.cleanAll();
						nativeWindow.title = "DllTool "+currentVersion;
						groupTab.selectedIndex = 1;
					}
				});
			}
			/**
			 * 添加一个新的资源组
			 */
			private function addGroupBtn_clickHandler(event:Event=null):void
			{
				if(groupName.text=="")
				{
					Alert.show("请先输入组名!","提示");
					return;
				}
				if(manager.hasGroupName(groupName.text))
				{
					Alert.show("无法添加，该组名已经存在！","提示");
					return;
				}
				manager.addOneGroup({name:groupName.text,list:[]});
				manager.refreshGroupList();
				groupTab.selectedItem = groupName.text;
				SharedObjectUtil.write(FL_DIR,"selectedIndex",groupTab.selectedIndex);
				groupName.text = "";
			}
			
			/**
			 * 输入组名后按回车
			 */
			protected function groupName_enterHandler(event:FlexEvent):void
			{
				addGroupBtn_clickHandler();
			}
			/**
			 * "添加文件"按钮触发
			 */
			protected function addFileBtn_clickHandler(event:Event):void
			{
				FileUtil.browseForOpen(function(list:Array):void{
					var files:Array = [];
					for each(var file:File in list)
					{
						if(searchfilter(file))
							files.push(file);
					}
					manager.addFiles(files);
				},2,null,"添加文件",srcPath.text);
			}
			
			/**
			 * “刷新”按钮触发
			 */
			private function refresBtn_clickHandler(event:Event=null):void
			{
				manager.refreshAll();
			}
			
			/**
			 * “一键打包”按钮触发
			 */
			protected function button1_clickHandler(event:Event):void
			{
				var resPath:String = srcPath.text;
				if(!resPath||manager.numGroups==0)
					return;
				var window:PackPanel = new PackPanel;
				window.addEventListener("startPack",startPublish);
				window.setData(manager.groupNameData.source,manager.resTypes);
				PopUpManager.addPopUp(window,this);
//				PopUpManager.centerPopUp(window);
				publishHandle();
			}
			
			/**
			 * 开始打包并发布资源
			 */
			private function startPack():void
			{
//				var exportPath:String = SharedObjectUtil.read(FL_DIR,"packedResPath");
//				var packedConfigPath:String = SharedObjectUtil.read(FL_DIR,"packedConfigPath");
				var exportPath:String = publishWindow.publishUrl+"\\Source\\";
				var packedConfigPath:String = publishWindow.publishUrl+"\\config\\ini"+publishWindow.version+".amf";
				SharedObjectUtil.write(FL_DIR,"packedResPath",exportPath);
				SharedObjectUtil.write(FL_DIR,"packedConfigPath",packedConfigPath);
				var compressType:Array = SharedObjectUtil.read(FL_DIR,"packedTypes");
				var packedGroups:Array = SharedObjectUtil.read(FL_DIR,"packedGroups");
				var exculdeTypes:Array = SharedObjectUtil.read(FL_DIR,"excludeTypes");
				var copyAll:Boolean = SharedObjectUtil.read(FL_DIR,"packedCopyAll");
				var crcCode:Boolean = SharedObjectUtil.read(FL_DIR,"packedCrcCode");
				if(copyAll)
				{
					var resList:Array = FileUtil.search(srcPath.text,null,searchfilter);
					for each(var file:File in resList)
					{
						var newPath:String = exportPath+file.nativePath.substr(srcPath.text.length);
						FileUtil.copyTo(file.nativePath,newPath,true);
					}
				}
				
				manager.startPack(exportPath,packedConfigPath,compressType,
					packedGroups,exculdeTypes,exportFormat.selectedItem as String,crcCode);
				
				status = "资源已经发布到:\""+exportPath+"\"下.";
			}
			
			/**
			 * 搜索资源
			 */
			private function searchRes(event:Event=null):void
			{
				var w:SearchPanel = new SearchPanel();
				w.setGroup(manager.groupNameData.source);
				w.addEventListener(SearchEvent.SEARCH_RES,doSearch);
				PopUpManager.addPopUp(w,this);
				PopUpManager.centerPopUp(w);
			}
			/**
			 * 执行搜索
			 */
			private function doSearch(event:SearchEvent):void
			{
				manager.searchKeys(event.keyList);
			}
			/**
			 * 清除搜索记录
			 */
			private function cleanSearchAndExist(event:Event):void
			{
				manager.cleanSearchAndExist(false);
			}
			
			protected function windowedapplication1_keyDownHandler(event:KeyboardEvent):void
			{
				if(event.ctrlKey)
				{
					if(event.keyCode==70)
						searchRes();
					else if(event.keyCode==68)
						manager.cleanSearchAndExist(false);
				}
			}
			/**
			 * 文件大小排序函数
			 */
			private function sizeCompareFunc(dataA:Object,dataB:Object,column:GridColumn):int
			{
				var sizeA:Number = Number(dataA.size);
				var sizeB:Number = Number(dataB.size);
				if(sizeA > sizeB)
					return 1;
				if(sizeA==sizeB)
					return 0
				return -1;
			}
			/**
			 * 文件大小显示格式化函数
			 */
			private function sizeLabelFunc(item:Object, column:GridColumn):String
			{
				return StringUtil.toSizeString(Number(item.size),2);
			}
			/**
			 * 选中项改变
			 */
			protected function dataGrid_selectionChangeHandler(event:GridSelectionEvent):void
			{
				var list:Vector.<Object> = dataGrid.selectedItems;
				var size:Number = 0;
				for each(var data:Object in list)
				{
					size += Number(data.size);
				}
				status = "选中项总大小:"+StringUtil.toSizeString(size);
			}
			/**
			 * 双击打开文件
			 */
			protected function dataGrid_doubleClickHandler(event:MouseEvent):void
			{
				var target:DisplayObject = event.target as DisplayObject;
				var found:Boolean = false;
				while(target)
				{
					if(target is GridLayer)
					{
						found = true;
						break;
					}
					target = target.parent;
				}
				if(!found)
					return;
				var data:Object = dataGrid.selectedItem;
				var url:String = srcPath.text+data.url;
				if(!manager.exists(url))
					url = data.url;
				if(!manager.exists(url))
					return;
				url = manager.escapeUrl(url);
				var file:File = new File(url);
				file.openWithDefaultApplication();
			}
			/**
			 * 刷新选中项
			 */
			protected function button2_clickHandler(event:Event=null):void
			{
				var item:Object = dataGrid.selectedItem;
				if(item)
					manager.refreshOne(item);
			}
			
			private function startPublish(event:Event):void
			{
				status = "开始发布，首先嵌入字体";
				publishWindow.addEventListener(PublishEvent.EMBED_FONT_COMPLETE, onEmbedFontCompleteHandle);
				publishWindow.embedFont();
			}
			
			private var publishWindow:DFPublishTool;
			private function publishHandle():void
			{
				publishWindow = new DFPublishTool();
				PopUpManager.addPopUp(publishWindow,this);
				publishWindow.x = 100;
				publishWindow.y = 100;
			}
			
			private function onEmbedFontCompleteHandle(e:PublishEvent):void
			{
				status = "嵌入字体完成";
				publishWindow.removeEventListener(PublishEvent.EMBED_FONT_COMPLETE, onEmbedFontCompleteHandle);
				startPack();
				status = "资源打包完成，开始编译程序";
				//编译程序文件
				publishWindow.addEventListener(PublishEvent.COMPILE_COMPLETE, onCompileCompleteHandle);
				publishWindow.compileDF();
			}
			
			private function onCompileCompleteHandle(e:PublishEvent):void
			{
				publishWindow.removeEventListener(PublishEvent.COMPILE_COMPLETE, onCompileCompleteHandle);
				status = "开始混淆、加密程序";
				publishWindow.onStartMixUpClick();
				status = "混淆、加密程序完成";
				PopUpManager.removePopUp(publishWindow);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:DataGrid id="dataGrid" doubleClick="dataGrid_doubleClickHandler(event)" doubleClickEnabled="true" left="119" right="0" top="31" bottom="0" dataProvider="{manager.itemListData}"
				editable="true" selectionMode="multipleRows" selectionChange="dataGrid_selectionChangeHandler(event)"
				gridItemEditorSessionSave="dataGrid_gridItemEditorSessionSaveHandler(event)"
				requestedRowCount="4">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="name" itemRenderer="org.flexlite.view.Item" headerText="name"></s:GridColumn>
				<s:GridColumn dataField="url" headerText="url" itemRenderer="org.flexlite.view.Item"></s:GridColumn>
				<s:GridColumn dataField="subkeys" itemRenderer="org.flexlite.view.Item" headerText="subkeys"></s:GridColumn>
				<s:GridColumn width="75" dataField="size" editable="false" labelFunction="{sizeLabelFunc}" sortCompareFunction="{sizeCompareFunc}" headerText="size"></s:GridColumn>
				<s:GridColumn width="75" dataField="language" headerText="language"></s:GridColumn>
				<s:GridColumn width="45" dataField="type" headerText="type"></s:GridColumn>
				<s:GridColumn width="45" editable="false" itemRenderer="org.flexlite.view.DelItem" headerText=""></s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Button id="browseBtn" x="300" y="5" width="44" label="浏览"
			  click="browseBtn_clickHandler(event)"/>
	<s:Label x="5" y="10" text="URL相对路径:"/>
	<s:TextInput id="srcPath" x="81" y="4" width="215" editable="false"/>
	<s:Button id="packBtn" y="5" left="432" label="发布资源" click="button1_clickHandler(event)"
			  toolTip="将配置和资源打包发布"/>
	<s:DropDownList id="exportFormat" y="5" right="13" width="70" selectedIndex="0">
		<s:ArrayCollection>
			<fx:Array>
				<fx:String>AMF</fx:String>
				<fx:String>XML</fx:String>
				<fx:String>JSON</fx:String>
			</fx:Array>
		</s:ArrayCollection>
	</s:DropDownList>
	<s:Label y="10" right="83" text="导出格式:"/>
	<s:Scroller x="0" top="31" bottom="0" width="120">
		<s:VGroup maxWidth="120" gap="-1" horizontalAlign="center">
			<s:List id="groupTab" x="0" y="31" width="100%" borderVisible="false" click="groupTab_changeHandler()"
					dataProvider="{manager.groupNameData}"
					itemRenderer="org.flexlite.view.GroupItem">
				<s:layout>
					<s:VerticalLayout gap="-1" horizontalAlign="justify" rowHeight="35"
									  variableRowHeight="false"/>
				</s:layout>
			</s:List>
			<s:Group width="100%" height="35">
				<s:TextInput id="groupName" left="0" enter="groupName_enterHandler(event)" right="34" height="35" toolTip="输入新组名"/>
				<s:Button id="addGroupBtn" y="0" right="0" width="35" height="35"
						  click="addGroupBtn_clickHandler(event)" icon="@Embed('icon/add.png')"
						  skinClass="spark.skins.spark.ButtonSkin" toolTip="添加一个组"/>
			</s:Group>
		</s:VGroup>
	</s:Scroller>
	<s:Button x="348" y="5" label="刷新选中项" click="button2_clickHandler(event)"/>
</s:WindowedApplication>
